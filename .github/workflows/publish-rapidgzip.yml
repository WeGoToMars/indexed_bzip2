name: Publish Rapidgzip to PyPI

on:
  push:
    tags:
      - 'rapidgzip-v*.*.*'

jobs:
  Deploy-Conda:
    # Not working yet and indexed_bzip2 only has a single download from conda ...
    if: false
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    env:
      MACOSX_DEPLOYMENT_TARGET: "10.14"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true

    - name: Fix macOS CommandLineTools Bug
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # See test.yml workflow for explanation but in short: conda build only works with the older SDK installed.
        wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz
        tar -xf MacOSX10.9.sdk.tar.xz
        cat <<EOF >> conda/conda_build_config.yaml
        CONDA_BUILD_SYSROOT:
          - $PWD/MacOSX10.9.sdk
        EOF

    - name: Build Conda Packages
      # Windows yields: fatal error C1001: An internal error has occurred in the compiler.
      #                 (compiler file 'msc1.cpp', line 1518)
      # This happens on the line: static constexpr FixedHuffmanCoding m_fixedHC = createFixedHC();
      # This is understandable because it is the most complex code but the wheels do build just fine though.
      if: matrix.os != 'windows-latest'
      # Bash shells do not use ~/.profile or ~/.bashrc so these shells need to be explicitely declared as shell:
      # bash -l {0} on steps that need to be properly activated
      shell: bash -l {0}
      env:
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      run: |
        conda install conda conda-build anaconda-client conda-verify packaging
        conda config --set anaconda_upload yes
        cd python/rapidgzip/conda
        python3 -m pip install --user build
        python3 -m build -o . --sdist ..
        mv rapidgzip-*.tar* src.tar
        conda build --token "$ANACONDA_TOKEN" .

  Deploy-AUR:
    needs: Deploy-Wheels
    runs-on: ubuntu-latest
    container:
      image: archlinux
    steps:
    - name: Set Up Non-Root User  # Because makepkg is an ass and forbids root from using it
      run: |
        groupadd sudo
        useradd -m -G sudo user
        echo '%sudo   ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers

    - name: Install System Dependencies
      run: |
        pacman -Syu --noconfirm
        pacman -Sy --noconfirm base-devel git python python-pip python-setuptools rhash openssh

    - name: Clone Repository
      env:
        RAPIDGZIP_AUR_SSH: ${{ secrets.RAPIDGZIP_AUR_SSH }}
      run: |
        chmod a+rwx .
        chown user .
        su user -c 'mkdir -p "$HOME/.ssh/"'
        su user -c 'echo "$RAPIDGZIP_AUR_SSH" > "$HOME/.ssh/aur"'
        su user -c 'echo -e "Host aur.archlinux.org\n  IdentityFile ~/.ssh/aur\n  User mxmln\n  StrictHostKeyChecking no" > "$HOME/.ssh/config"'
        su user -c 'chmod 0600 "$HOME/.ssh/config" "$HOME/.ssh/aur"'
        su user -c 'chmod 0700 "$HOME/.ssh/"'
        su user -c 'git clone ssh://aur@aur.archlinux.org/python-rapidgzip.git .'

    - name: Update PKGBUILD
      run: |
        # Annoyingly, --no-deps is not sufficient and building the wheels would still be triggered even
        # just for downloading the source tarball! But, --no-build-isolation seems to avoid that:
        # https://discuss.python.org/t/pip-download-just-the-source-packages-no-building-no-metadata-etc/4651/7
        pip download --no-binary :all: --no-deps --no-build-isolation rapidgzip
        pkgver=$( echo rapidgzip-*.tar.gz | sed -E 's|rapidgzip-([0-9.]*).*[.]tar.gz|\1|' )
        blake2b=$( python3 -c 'import hashlib, sys; h=hashlib.blake2b(digest_size=256 // 8); h.update(open(sys.argv[1], "rb").read()); print(h.digest().hex())' rapidgzip-*.tar.gz )
        # Update PKGBUILD
        sed -i "s|pkgver=.*|pkgver=$pkgver|" PKGBUILD
        sed -i "s|sha256sums=.*|sha256sums=('$( rhash -p"%x{sha-256}" rapidgzip-*.tar.gz )')|" PKGBUILD
        sed -i -E "s|(.*pythonhosted.org/packages)/[0-9a-f]{2}/[0-9a-f]{2}/[0-9a-f]*/(.*)|\1/${blake2b:0:2}/${blake2b:2:2}/${blake2b:4}/\2|" PKGBUILD
        su user -c 'makepkg --printsrcinfo > .SRCINFO'
        su user -c 'git add -f PKGBUILD .SRCINFO'
        su user -c 'git config --local user.email "mxmlnknp@gmail.com"'
        su user -c 'git config --local user.name "Maximilian Knespel"'
        su user -c "git commit -m 'Update to $pkgver'"
        su user -c 'git show'

    - name: Test PKGBUILD
      run: |
        su user -c 'makepkg -s --noconfirm'
        su user -c 'makepkg --noconfirm --install python-rapidgzip-*.tar.zst'

    - name: Push PKGBUILD
      run: |
        su user -c 'git push'
